"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[901],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},r=Object.keys(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(s=0;s<r.length;s++)n=r[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=s.createContext({}),l=function(e){var t=s.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return s.createElement(c.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},m=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,c=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=l(n),m=a,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||r;return n?s.createElement(h,i(i({ref:t},u),{},{components:n})):s.createElement(h,i({ref:t},u))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=m;var o={};for(var c in t)hasOwnProperty.call(t,c)&&(o[c]=t[c]);o.originalType=e,o[p]="string"==typeof e?e:a,i[1]=o;for(var l=2;l<r;l++)i[l]=n[l];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}m.displayName="MDXCreateElement"},3374:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>d,frontMatter:()=>r,metadata:()=>o,toc:()=>l});var s=n(7462),a=(n(7294),n(3905));const r={},i="Facade",o={unversionedId:"design_patterns/structural/Facade/README",id:"design_patterns/structural/Facade/README",title:"Facade",description:"What is?",source:"@site/docs/design_patterns/structural/Facade/README.md",sourceDirName:"design_patterns/structural/Facade",slug:"/design_patterns/structural/Facade/",permalink:"/docs/design_patterns/structural/Facade/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/design_patterns/structural/Facade/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bridge",permalink:"/docs/design_patterns/structural/Brigde/"}},c={},l=[{value:"What is?",id:"what-is",level:2},{value:"What this pattern solve?",id:"what-this-pattern-solve",level:2},{value:"Steps",id:"steps",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"Example (Typescript)",id:"example-typescript",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,s.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"facade"},"Facade"),(0,a.kt)("h2",{id:"what-is"},"What is?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"With this pattern, we provide a simplified interface to a complex set of classes, frameworks or libraries")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"what-this-pattern-solve"},"What this pattern solve?"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"The business logic using 3rd-party libraries is hard to comprehend and mantain because the coupling with the implementation of them.")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"steps"},"Steps"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Check if is possible to provide a simpler interface to an subsystem."),(0,a.kt)("li",{parentName:"ul"},"Declare and implement this interface in the facade class"),(0,a.kt)("li",{parentName:"ul"},"Call in the client code the facade implementation"),(0,a.kt)("li",{parentName:"ul"},"If becomes too big, extract to a new class")),(0,a.kt)("hr",null),(0,a.kt)("h2",{id:"when-to-use"},"When to use"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"When we need a limited but straightforward interface"),(0,a.kt)("li",{parentName:"ul"},"When we want to structure a subsystem into layers")),(0,a.kt)("h2",{id:"example-typescript"},"Example (Typescript)"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The Facade class provides a simple interface to the complex logic of one or\n * several subsystems. The Facade delegates the client requests to the\n * appropriate objects within the subsystem. The Facade is also responsible for\n * managing their lifecycle. All of this shields the client from the undesired\n * complexity of the subsystem.\n */\n class Facade {\n  protected subsystem1: Subsystem1;\n\n  protected subsystem2: Subsystem2;\n\n  /**\n   * Depending on your application's needs, you can provide the Facade with\n   * existing subsystem objects or force the Facade to create them on its own.\n   */\n  constructor(subsystem1?: Subsystem1, subsystem2?: Subsystem2) {\n      this.subsystem1 = subsystem1 || new Subsystem1();\n      this.subsystem2 = subsystem2 || new Subsystem2();\n  }\n\n  /**\n   * The Facade's methods are convenient shortcuts to the sophisticated\n   * functionality of the subsystems. However, clients get only to a fraction\n   * of a subsystem's capabilities.\n   */\n  public operation(): string {\n      let result = 'Facade initializes subsystems:\\n';\n      result += this.subsystem1.operation1();\n      result += this.subsystem2.operation1();\n      result += 'Facade orders subsystems to perform the action:\\n';\n      result += this.subsystem1.operationN();\n      result += this.subsystem2.operationZ();\n\n      return result;\n  }\n}\n\n/**\n* The Subsystem can accept requests either from the facade or client directly.\n* In any case, to the Subsystem, the Facade is yet another client, and it's not\n* a part of the Subsystem.\n*/\nclass Subsystem1 {\n  public operation1(): string {\n      return 'Subsystem1: Ready!\\n';\n  }\n\n  // ...\n\n  public operationN(): string {\n      return 'Subsystem1: Go!\\n';\n  }\n}\n\n/**\n* Some facades can work with multiple subsystems at the same time.\n*/\nclass Subsystem2 {\n  public operation1(): string {\n      return 'Subsystem2: Get ready!\\n';\n  }\n\n  // ...\n\n  public operationZ(): string {\n      return 'Subsystem2: Fire!';\n  }\n}\n\n/**\n* The client code works with complex subsystems through a simple interface\n* provided by the Facade. When a facade manages the lifecycle of the subsystem,\n* the client might not even know about the existence of the subsystem. This\n* approach lets you keep the complexity under control.\n*/\nfunction clientCode(facade: Facade) {\n  // ...\n\n  console.log(facade.operation());\n\n  // ...\n}\n\n/**\n* The client code may have some of the subsystem's objects already created. In\n* this case, it might be worthwhile to initialize the Facade with these objects\n* instead of letting the Facade create new instances.\n*/\nconst subsystem1 = new Subsystem1();\nconst subsystem2 = new Subsystem2();\nconst facade = new Facade(subsystem1, subsystem2);\nclientCode(facade);\n")))}d.isMDXComponent=!0}}]);