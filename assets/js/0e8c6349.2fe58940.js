"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[50],{3905:(e,n,t)=>{t.d(n,{Zo:()=>s,kt:()=>f});var i=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);n&&(i=i.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,i)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,i,r=function(e,n){if(null==e)return{};var t,i,r={},l=Object.keys(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(i=0;i<l.length;i++)t=l[i],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var o=i.createContext({}),u=function(e){var n=i.useContext(o),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=u(e.components);return i.createElement(o.Provider,{value:n},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return i.createElement(i.Fragment,{},n)}},b=i.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),p=u(t),b=r,f=p["".concat(o,".").concat(b)]||p[b]||d[b]||l;return t?i.createElement(f,a(a({ref:n},s),{},{components:t})):i.createElement(f,a({ref:n},s))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,a=new Array(l);a[0]=b;var c={};for(var o in n)hasOwnProperty.call(n,o)&&(c[o]=n[o]);c.originalType=e,c[p]="string"==typeof e?e:r,a[1]=c;for(var u=2;u<l;u++)a[u]=t[u];return i.createElement.apply(null,a)}return i.createElement.apply(null,t)}b.displayName="MDXCreateElement"},4737:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>d,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var i=t(7462),r=(t(7294),t(3905));const l={},a="Interface Segregation Principle (ISP)",c={unversionedId:"SOLID/interface_segregation_principle/README",id:"SOLID/interface_segregation_principle/README",title:"Interface Segregation Principle (ISP)",description:"What is this?",source:"@site/docs/SOLID/interface_segregation_principle/README.md",sourceDirName:"SOLID/interface_segregation_principle",slug:"/SOLID/interface_segregation_principle/",permalink:"/docs/SOLID/interface_segregation_principle/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/SOLID/interface_segregation_principle/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Dependency Inversion Principle (DIP)",permalink:"/docs/SOLID/dependency_inversion_principle/"},next:{title:"Liskov Substitution Principle (LSP)",permalink:"/docs/SOLID/liskov_substitution_principle/"}},o={},u=[{value:"What is this?",id:"what-is-this",level:2},{value:"Why?",id:"why",level:2},{value:"Examples (Java)",id:"examples-java",level:2},{value:"Bad example",id:"bad-example",level:3},{value:"Good example",id:"good-example",level:3}],s={toc:u},p="wrapper";function d(e){let{components:n,...t}=e;return(0,r.kt)(p,(0,i.Z)({},s,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"interface-segregation-principle-isp"},"Interface Segregation Principle (ISP)"),(0,r.kt)("h2",{id:"what-is-this"},"What is this?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This principle say: ")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"A class should not be forced to implement interfaces and methods who will not be used")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"why"},"Why?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"We need to create specific interfaces instead a generic interface"),(0,r.kt)("li",{parentName:"ul"},"With specific interfaces, the classes do not require useless information")),(0,r.kt)("h2",{id:"examples-java"},"Examples (Java)"),(0,r.kt)("h3",{id:"bad-example"},"Bad example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},'interface Birds {\n    public function setLocale($longitude, $latitude);\n\n    public function setAltitude($altitude);\n\n    public function render();\n}\n\nclass Parrot implements Birds {\n    public function setLocale($longitude, $latitude) {\n        // bla bla bla\n    }\n\n    public function setAltitude($altitude) {\n        // bla bla bla   \n    }\n\n    public function render() {\n        // bla bla bla\n    }\n}\n\n/* Here the "setAltitude" is required to penguim, but penguins doesnt fly! */\nclass Penguim implements Birds {\n    public function setLocale($longitude, $latitude) {\n        // bla bla bla\n    }\n\n    public function setAltitude($altitude) {\n        // ! bla bla bla   \n    }\n\n    public function render() {\n        // bla bla bla\n    }\n}\n')),(0,r.kt)("h3",{id:"good-example"},"Good example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-js"},"interface Birds {\n    public function setLocale($longitude, $latitude);\n    public function render();\n}\n\n/* Here we're implementing a specific class to be used by birds who fly */\ninterface BirdsFly extends Birds {\n    public function setAltitude($altitude);\n}\n\nclass Parrot implements BirdsFly {\n    public function setLocale($longitude, $latitude) {\n        // bla bla bla\n    }\n    \n    public function setAltitude($altitude) {\n        // bla bla bla   \n    }\n    \n    public function render() {\n        // bla bla bla\n    }\n}\n\nclass Penguim implements Birds {\n    public function setLocale($longitude, $latitude) {\n        // bla bla bla\n    }\n    \n    public function render() {\n        // bla bla bla\n    }\n}\n")))}d.isMDXComponent=!0}}]);