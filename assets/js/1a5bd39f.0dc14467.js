"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[12],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),s=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=s(e.components);return r.createElement(c.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},h=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=s(t),h=o,m=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=h;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l[d]="string"==typeof e?e:o,i[1]=l;for(var s=2;s<a;s++)i[s]=t[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}h.displayName="MDXCreateElement"},4194:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>s});var r=t(7462),o=(t(7294),t(3905));const a={},i="Open-closed principle (OCP)",l={unversionedId:"SOLID/open_closed_principle/README",id:"SOLID/open_closed_principle/README",title:"Open-closed principle (OCP)",description:"What is this?",source:"@site/docs/SOLID/open_closed_principle/README.md",sourceDirName:"SOLID/open_closed_principle",slug:"/SOLID/open_closed_principle/",permalink:"/buda/docs/SOLID/open_closed_principle/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/SOLID/open_closed_principle/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Liskov Substitution Principle (LSP)",permalink:"/buda/docs/SOLID/liskov_substitution_principle/"},next:{title:"Single Responsibility Principle (SRP)",permalink:"/buda/docs/SOLID/single_responsibility_principle/"}},c={},s=[{value:"What is this?",id:"what-is-this",level:2},{value:"Why?",id:"why",level:2},{value:"Examples (React)",id:"examples-react",level:2},{value:"Bad example",id:"bad-example",level:3},{value:"Good example",id:"good-example",level:3}],p={toc:s},d="wrapper";function u(e){let{components:n,...t}=e;return(0,o.kt)(d,(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"open-closed-principle-ocp"},"Open-closed principle (OCP)"),(0,o.kt)("h2",{id:"what-is-this"},"What is this?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"This principle say: ")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"The entities need to be open to extension, but closed to changes")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"why"},"Why?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"With that, we extends the behavior using heritage, interfaces and compositions, with more abstraction and less coupling")),(0,o.kt)("h2",{id:"examples-react"},"Examples (React)"),(0,o.kt)("h3",{id:"bad-example"},"Bad example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},"const Header = () => {\n  const { pathname } = useRouter()\n\n  return (\n    <header>\n      <Logo />\n      <Actions>\n        {/* Here we are letting the component take the responsability from the \n        consumer. If we need to define a new route, f.e., we need to change this \n        file and insert a new code line. So,  we have a bad coupling */}\n        {pathname === '/dashboard' && <Link to=\"/events/new\">Create event</Link>}\n        {pathname === '/' && <Link to=\"/dashboard\">Go to dashboard</Link>}\n      </Actions>\n    </header>\n  )\n}\n\nconst HomePage = () => (\n  <>\n    <Header />\n    <OtherHomeStuff />\n  </>\n)\n\nconst DashboardPage = () => (\n  <>\n    <Header />\n    <OtherDashboardStuff />\n  </>\n)\n")),(0,o.kt)("h3",{id:"good-example"},"Good example"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-jsx"},'const Header = ({ children }) => (\n  <header>\n    <Logo />\n    <Actions>\n      {/* Now we use composition to modify by outside the content of this component, instead changing direct in this component */}\n      {children}\n    </Actions>\n  </header>\n)\n\nconst HomePage = () => (\n  <>\n    <Header>\n      <Link to="/dashboard">Go to dashboard</Link>\n    </Header>\n    <OtherHomeStuff />\n  </>\n)\n\nconst DashboardPage = () => (\n  <>\n    <Header>\n      <Link to="/events/new">Create event</Link>\n    </Header>\n    <OtherDashboardStuff />\n  </>\n)\n')))}u.isMDXComponent=!0}}]);