"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[245],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},g=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),p=c(n),g=r,h=p["".concat(s,".").concat(g)]||p[g]||d[g]||i;return n?a.createElement(h,o(o({ref:t},u),{},{components:n})):a.createElement(h,o({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=g;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},7036:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},o="Singleton",l={unversionedId:"design_patterns/creational/Singleton/README",id:"design_patterns/creational/Singleton/README",title:"Singleton",description:"What is?",source:"@site/docs/design_patterns/creational/Singleton/README.md",sourceDirName:"design_patterns/creational/Singleton",slug:"/design_patterns/creational/Singleton/",permalink:"/buda/docs/design_patterns/creational/Singleton/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/design_patterns/creational/Singleton/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Factory",permalink:"/buda/docs/design_patterns/creational/Factory/"},next:{title:"Adapter",permalink:"/buda/docs/design_patterns/structural/Adapter/"}},s={},c=[{value:"What is?",id:"what-is",level:2},{value:"Problems",id:"problems",level:2},{value:"Steps",id:"steps",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"Example (typescript)",id:"example-typescript",level:2}],u={toc:c},p="wrapper";function d(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"singleton"},"Singleton"),(0,r.kt)("h2",{id:"what-is"},"What is?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"With this pattern, we ensure that a class has only one global instance, providing the access to this instance.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"problems"},"Problems"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"This pattern solve 2 problems at the same time, violating the SRP (Single Responsibility Principle)."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Problem 1:")," Ensure that a class has just a single instance, using the same object."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"Problem 2:")," Provide a global access to that instance, accessing the same object from anywhere and protecting the is instance of being overwritten.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Make default constructor private, to prevent to not being called with ",(0,r.kt)("inlineCode",{parentName:"li"},"new")),(0,r.kt)("li",{parentName:"ul"},"Create a static creation method that acts as a constructor and return this object.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"when-to-use"},"When to use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When a class should have just a single instance available to all clients. F.e., a database connection"),(0,r.kt)("li",{parentName:"ul"},"When we need a stricter control over global variables")),(0,r.kt)("h2",{id:"example-typescript"},"Example (typescript)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The Singleton class defines the `getInstance` method that lets clients access\n * the unique singleton instance.\n */\nclass Singleton {\n  private static instance: Singleton\n\n  /**\n   * The Singleton's constructor should always be private to prevent direct\n   * construction calls with the `new` operator.\n   */\n  private constructor () { }\n\n  /**\n   * The static method that controls the access to the singleton instance.\n   *\n   * This implementation let you subclass the Singleton class while keeping\n   * just one instance of each subclass around.\n   */\n  public static getInstance (): Singleton {\n    if (!Singleton.instance) {\n      Singleton.instance = new Singleton()\n    }\n\n    return Singleton.instance\n  }\n\n  /**\n   * Finally, any singleton should define some business logic, which can be\n   * executed on its instance.\n   */\n  public someBusinessLogic () {\n    // ...\n  }\n}\n\n/**\n* The client code.\n*/\nfunction clientCode () {\n  const s1 = Singleton.getInstance()\n  const s2 = Singleton.getInstance()\n\n  if (s1 === s2) {\n    console.log('Singleton works, both variables contain the same instance.')\n  } else {\n    console.log('Singleton failed, variables contain different instances.')\n  }\n}\n\nclientCode()\n\n")))}d.isMDXComponent=!0}}]);