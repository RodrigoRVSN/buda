"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[53],{1109:e=>{e.exports=JSON.parse('{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"About","href":"/buda/docs/About/","docId":"About/README"},{"type":"category","label":"\ud83c\udfdb SOLID","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Dependency Inversion Principle (DIP)","href":"/buda/docs/SOLID/dependency_inversion_principle/","docId":"SOLID/dependency_inversion_principle/README"},{"type":"link","label":"Interface Segregation Principle (ISP)","href":"/buda/docs/SOLID/interface_segregation_principle/","docId":"SOLID/interface_segregation_principle/README"},{"type":"link","label":"Liskov Substitution Principle (LSP)","href":"/buda/docs/SOLID/liskov_substitution_principle/","docId":"SOLID/liskov_substitution_principle/README"},{"type":"link","label":"Open-closed principle (OCP)","href":"/buda/docs/SOLID/open_closed_principle/","docId":"SOLID/open_closed_principle/README"},{"type":"link","label":"Single Responsibility Principle (SRP)","href":"/buda/docs/SOLID/single_responsibility_principle/","docId":"SOLID/single_responsibility_principle/README"}],"href":"/buda/docs/SOLID/"},{"type":"category","label":"\ud83d\udcd6 Books annotations and exercises","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"grooking_algorithms","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Array Linked List","href":"/buda/docs/books/grooking_algorithms/Array_Linked-list/","docId":"books/grooking_algorithms/Array_Linked-list/README"},{"type":"link","label":"Recursion","href":"/buda/docs/books/grooking_algorithms/Recursion_Call-stack/","docId":"books/grooking_algorithms/Recursion_Call-stack/README"},{"type":"link","label":"D&C (Divide & Conquer)","href":"/buda/docs/books/grooking_algorithms/D&C_Quick-sort/","docId":"books/grooking_algorithms/D&C_Quick-sort/README"},{"type":"link","label":"Hash Tables","href":"/buda/docs/books/grooking_algorithms/Hash-Tables/","docId":"books/grooking_algorithms/Hash-Tables/README"},{"type":"link","label":"Bread First Search","href":"/buda/docs/books/grooking_algorithms/Bread-First-Search/","docId":"books/grooking_algorithms/Bread-First-Search/README"},{"type":"link","label":"Dijkstra","href":"/buda/docs/books/grooking_algorithms/Dijkstra/","docId":"books/grooking_algorithms/Dijkstra/README"},{"type":"link","label":"NP Complete","href":"/buda/docs/books/grooking_algorithms/NP-Complete/","docId":"books/grooking_algorithms/NP-Complete/README"},{"type":"link","label":"Dynamic Programming","href":"/buda/docs/books/grooking_algorithms/Dynamic-Programming/","docId":"books/grooking_algorithms/Dynamic-Programming/README"},{"type":"link","label":"K-nearest neighbors","href":"/buda/docs/books/grooking_algorithms/K-nearest-neighbors/","docId":"books/grooking_algorithms/K-nearest-neighbors/README"},{"type":"link","label":"Next algorithms to study","href":"/buda/docs/books/grooking_algorithms/Next-steps/","docId":"books/grooking_algorithms/Next-steps/README"}]}],"href":"/buda/docs/books/"},{"type":"category","label":"concepts","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Domain Driven Design (DDD)","href":"/buda/docs/concepts/DDD/","docId":"concepts/DDD/README"},{"type":"link","label":"Databases","href":"/buda/docs/concepts/Database/","docId":"concepts/Database/README"},{"type":"link","label":"Test Driven Development (TDD)","href":"/buda/docs/concepts/TDD/","docId":"concepts/TDD/README"}]},{"type":"category","label":"\ud83c\udfb2 Data Structures","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"\ud83e\uddd0 Big O - Asymptotic Complexity (O(x))","href":"/buda/docs/data_structure/big-o/","docId":"data_structure/big-o/README"},{"type":"link","label":"\ud83c\udf10 Graphs","href":"/buda/docs/data_structure/graphs/","docId":"data_structure/graphs/README"},{"type":"link","label":"\ud83d\udd17 Lists","href":"/buda/docs/data_structure/lists/","docId":"data_structure/lists/README"},{"type":"link","label":"\u27a1\ufe0f Queues","href":"/buda/docs/data_structure/queues/","docId":"data_structure/queues/README"},{"type":"link","label":"\ud83d\udcda\ufe0f Pilhas (Stack) - Listas","href":"/buda/docs/data_structure/stack/","docId":"data_structure/stack/README"},{"type":"link","label":"\ud83c\udf84 Trees","href":"/buda/docs/data_structure/trees/","docId":"data_structure/trees/README"}],"href":"/buda/docs/data_structure/"},{"type":"category","label":"\ud83d\udc68\u200d\ud83c\udfa8 Design Patterns","collapsible":true,"collapsed":true,"items":[{"type":"category","label":"behavioral","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Command","href":"/buda/docs/design_patterns/behavioral/Command/","docId":"design_patterns/behavioral/Command/README"},{"type":"link","label":"Observer","href":"/buda/docs/design_patterns/behavioral/Observer/","docId":"design_patterns/behavioral/Observer/README"},{"type":"link","label":"Strategy","href":"/buda/docs/design_patterns/behavioral/Strategy/","docId":"design_patterns/behavioral/Strategy/README"}]},{"type":"category","label":"creational","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Factory","href":"/buda/docs/design_patterns/creational/Factory/","docId":"design_patterns/creational/Factory/README"},{"type":"link","label":"Singleton","href":"/buda/docs/design_patterns/creational/Singleton/","docId":"design_patterns/creational/Singleton/README"}]},{"type":"category","label":"structural","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Adapter","href":"/buda/docs/design_patterns/structural/Adapter/","docId":"design_patterns/structural/Adapter/README"},{"type":"link","label":"Bridge","href":"/buda/docs/design_patterns/structural/Brigde/","docId":"design_patterns/structural/Brigde/README"},{"type":"link","label":"Facade","href":"/buda/docs/design_patterns/structural/Facade/","docId":"design_patterns/structural/Facade/README"}]}],"href":"/buda/docs/design_patterns/"}]},"docs":{"About/README":{"id":"About/README","title":"About","description":"\ud83d\udd0e Here we have:","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Array_Linked-list/README":{"id":"books/grooking_algorithms/Array_Linked-list/README","title":"Array Linked List","description":"- When you want to store multiples elements, use and array or a list","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Bread-First-Search/README":{"id":"books/grooking_algorithms/Bread-First-Search/README","title":"Bread First Search","description":"- Queues are FIFO (First In First Out)","sidebar":"tutorialSidebar"},"books/grooking_algorithms/D&C_Quick-sort/README":{"id":"books/grooking_algorithms/D&C_Quick-sort/README","title":"D&C (Divide & Conquer)","description":"- D&C is used breaking a problem into smaller pieces","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Dijkstra/README":{"id":"books/grooking_algorithms/Dijkstra/README","title":"Dijkstra","description":"- Breadth First Search is used to calculate the shortest path on a unweighted graph","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Dynamic-Programming/README":{"id":"books/grooking_algorithms/Dynamic-Programming/README","title":"Dynamic Programming","description":"- Optimize something given a constraint","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Hash-Tables/README":{"id":"books/grooking_algorithms/Hash-Tables/README","title":"Hash Tables","description":"What hash tables are good for?","sidebar":"tutorialSidebar"},"books/grooking_algorithms/K-nearest-neighbors/README":{"id":"books/grooking_algorithms/K-nearest-neighbors/README","title":"K-nearest neighbors","description":"- KNN is used for classification and regression, and involves looking at the k-nearest neighbors","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Next-steps/README":{"id":"books/grooking_algorithms/Next-steps/README","title":"Next algorithms to study","description":"- Trees (B-trees, Red-black trees, Heaps, Splay trees)","sidebar":"tutorialSidebar"},"books/grooking_algorithms/NP-Complete/README":{"id":"books/grooking_algorithms/NP-Complete/README","title":"NP Complete","description":"- NP complete problems doesnt have known fast solutions","sidebar":"tutorialSidebar"},"books/grooking_algorithms/Recursion_Call-stack/README":{"id":"books/grooking_algorithms/Recursion_Call-stack/README","title":"Recursion","description":"- The function calls itself","sidebar":"tutorialSidebar"},"books/README":{"id":"books/README","title":"\ud83d\udcd6 Books annotations and exercises","description":"- Grokking Algorithms: An Illustrated Guide for Programmers and Other Curious People (Aditya Bhargava)","sidebar":"tutorialSidebar"},"concepts/Database/README":{"id":"concepts/Database/README","title":"Databases","description":"Relational","sidebar":"tutorialSidebar"},"concepts/DDD/README":{"id":"concepts/DDD/README","title":"Domain Driven Design (DDD)","description":"- Which is an approach to software development that focuses on modeling the core domain of a business application and aligning the software design with the business domain.","sidebar":"tutorialSidebar"},"concepts/TDD/README":{"id":"concepts/TDD/README","title":"Test Driven Development (TDD)","description":"It\'s a methodology that focuses in creating the tests before developing the code. It originated from Agile and XP (Extreme Programming) practices.","sidebar":"tutorialSidebar"},"data_structure/big-o/README":{"id":"data_structure/big-o/README","title":"\ud83e\uddd0 Big O - Asymptotic Complexity (O(x))","description":"All code has a complexity, like:","sidebar":"tutorialSidebar"},"data_structure/graphs/README":{"id":"data_structure/graphs/README","title":"\ud83c\udf10 Graphs","description":"- Abstract data type, made by a even V, E, with V being Vertices and E being Edges","sidebar":"tutorialSidebar"},"data_structure/lists/README":{"id":"data_structure/lists/README","title":"\ud83d\udd17 Lists","description":"- The elements must have a logic and fisic order between them.","sidebar":"tutorialSidebar"},"data_structure/queues/README":{"id":"data_structure/queues/README","title":"\u27a1\ufe0f Queues","description":"- The first element to enter, is the first to go out.","sidebar":"tutorialSidebar"},"data_structure/README":{"id":"data_structure/README","title":"\ud83c\udfb2 Data Structures","description":"Ways to store data in memory","sidebar":"tutorialSidebar"},"data_structure/stack/README":{"id":"data_structure/stack/README","title":"\ud83d\udcda\ufe0f Pilhas (Stack) - Listas","description":"- The last element to enter, is the first to leave.","sidebar":"tutorialSidebar"},"data_structure/trees/README":{"id":"data_structure/trees/README","title":"\ud83c\udf84 Trees","description":"- Trees has similar to the node structure of lists","sidebar":"tutorialSidebar"},"design_patterns/behavioral/Command/README":{"id":"design_patterns/behavioral/Command/README","title":"Command","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/behavioral/Observer/README":{"id":"design_patterns/behavioral/Observer/README","title":"Observer","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/behavioral/Strategy/README":{"id":"design_patterns/behavioral/Strategy/README","title":"Strategy","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/creational/Factory/README":{"id":"design_patterns/creational/Factory/README","title":"Factory","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/creational/Singleton/README":{"id":"design_patterns/creational/Singleton/README","title":"Singleton","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/README":{"id":"design_patterns/README","title":"\ud83d\udc68\u200d\ud83c\udfa8 Design Patterns","description":"Classification","sidebar":"tutorialSidebar"},"design_patterns/structural/Adapter/README":{"id":"design_patterns/structural/Adapter/README","title":"Adapter","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/structural/Brigde/README":{"id":"design_patterns/structural/Brigde/README","title":"Bridge","description":"What is?","sidebar":"tutorialSidebar"},"design_patterns/structural/Facade/README":{"id":"design_patterns/structural/Facade/README","title":"Facade","description":"What is?","sidebar":"tutorialSidebar"},"SOLID/dependency_inversion_principle/README":{"id":"SOLID/dependency_inversion_principle/README","title":"Dependency Inversion Principle (DIP)","description":"What is this?","sidebar":"tutorialSidebar"},"SOLID/interface_segregation_principle/README":{"id":"SOLID/interface_segregation_principle/README","title":"Interface Segregation Principle (ISP)","description":"What is this?","sidebar":"tutorialSidebar"},"SOLID/liskov_substitution_principle/README":{"id":"SOLID/liskov_substitution_principle/README","title":"Liskov Substitution Principle (LSP)","description":"What is this?","sidebar":"tutorialSidebar"},"SOLID/open_closed_principle/README":{"id":"SOLID/open_closed_principle/README","title":"Open-closed principle (OCP)","description":"What is this?","sidebar":"tutorialSidebar"},"SOLID/README":{"id":"SOLID/README","title":"\ud83c\udfdb SOLID","description":"_","sidebar":"tutorialSidebar"},"SOLID/single_responsibility_principle/README":{"id":"SOLID/single_responsibility_principle/README","title":"Single Responsibility Principle (SRP)","description":"What is this?","sidebar":"tutorialSidebar"}}}')}}]);