"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[711],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,g=u["".concat(s,".").concat(m)]||u[m]||h[m]||i;return n?a.createElement(g,l(l({ref:t},p),{},{components:n})):a.createElement(g,l({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=m;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[u]="string"==typeof e?e:r,l[1]=o;for(var c=2;c<i;c++)l[c]=n[c];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},2894:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const i={},l="Strategy",o={unversionedId:"design_patterns/behavioral/Strategy/README",id:"design_patterns/behavioral/Strategy/README",title:"Strategy",description:"What is?",source:"@site/docs/design_patterns/behavioral/Strategy/README.md",sourceDirName:"design_patterns/behavioral/Strategy",slug:"/design_patterns/behavioral/Strategy/",permalink:"/buda/docs/design_patterns/behavioral/Strategy/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/design_patterns/behavioral/Strategy/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Observer",permalink:"/buda/docs/design_patterns/behavioral/Observer/"},next:{title:"Factory",permalink:"/buda/docs/design_patterns/creational/Factory/"}},s={},c=[{value:"What is?",id:"what-is",level:2},{value:"What this pattern solve?",id:"what-this-pattern-solve",level:2},{value:"Steps",id:"steps",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"Example (Typescript)",id:"example-typescript",level:2}],p={toc:c},u="wrapper";function h(e){let{components:t,...n}=e;return(0,r.kt)(u,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"strategy"},"Strategy"),(0,r.kt)("h2",{id:"what-is"},"What is?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"With this pattern we define families of algorithms and make them interchangeable."),(0,r.kt)("li",{parentName:"ul"},"Code closed to modification and open to expansion")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"what-this-pattern-solve"},"What this pattern solve?"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"If we need to add a method in a class, without this pattern we need to write in the class, making a big code with possibility to has merge conflits.")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"steps"},"Steps"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Identify an algorithm that has frequent changes"),(0,r.kt)("li",{parentName:"ul"},"Declare the strategy common to all variants"),(0,r.kt)("li",{parentName:"ul"},"All variants need to implement that interface method in common")),(0,r.kt)("hr",null),(0,r.kt)("h2",{id:"when-to-use"},"When to use"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"When we want to use variations of an algorithm and be able to switch one to another during runtime."),(0,r.kt)("li",{parentName:"ul"},"When we have similar classes that differ the way they execute the behavior."),(0,r.kt)("li",{parentName:"ul"},"When we want to have an isolate business logic"),(0,r.kt)("li",{parentName:"ul"},"When the class has a lot of conditional statement to change the behavior of the same algorithm")),(0,r.kt)("h2",{id:"example-typescript"},"Example (Typescript)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface AnimalStrategy {\n  saySomething(): string;\n}\n\nclass Animal {\n  // Keep a reference to the AnimalStrategy, but don't know the concrete class of the AnimalStrategy\n  private strategy: AnimalStrategy;\n\n  // Define strategy in constructor\n  constructor(strategy: AnimalStrategy) {\n    this.strategy = strategy;\n  }\n\n  // Let to change the strategy in runtime\n  public setStrategy(strategy: AnimalStrategy) {\n    this.strategy = strategy;\n  }\n\n  // The Animal class use the strategy to implement the method\n  public giveAHello(): string {\n    return this.strategy.saySomething();\n  }\n}\n\n// Classes implementing the AnimalStrategy to define the behavior that the class will use\nclass Dog implements AnimalStrategy {\n  public saySomething(): string {\n    return \"Au au\";\n  }\n}\n\nclass Cat implements AnimalStrategy {\n  public saySomething(): string {\n    return \"Meow\";\n  }\n}\n\n// Define a strategy and keep it in runtime\nconst context = new Animal(new Dog());\nconsole.log('Animal Strategy is a Dog: ', context.giveAHello());\n\ncontext.setStrategy(new Cat());\nconsole.log('Animal Strategy is a Cat: ', context.giveAHello());\n")))}h.isMDXComponent=!0}}]);