"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[156],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>g});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),p=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},m=function(e){var t=p(e.components);return a.createElement(s.Provider,{value:t},e.children)},u="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,i=e.originalType,s=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),u=p(r),h=n,g=u["".concat(s,".").concat(h)]||u[h]||k[h]||i;return r?a.createElement(g,o(o({ref:t},m),{},{components:r})):a.createElement(g,o({ref:t},m))}));function g(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=r.length,o=new Array(i);o[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[u]="string"==typeof e?e:n,o[1]=l;for(var p=2;p<i;p++)o[p]=r[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,r)}h.displayName="MDXCreateElement"},191:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>k,frontMatter:()=>i,metadata:()=>l,toc:()=>p});var a=r(7462),n=(r(7294),r(3905));const i={},o="\ud83c\udf84 Trees",l={unversionedId:"data_structure/trees/README",id:"data_structure/trees/README",title:"\ud83c\udf84 Trees",description:"- Trees has similar to the node structure of lists",source:"@site/docs/data_structure/trees/README.md",sourceDirName:"data_structure/trees",slug:"/data_structure/trees/",permalink:"/buda/docs/data_structure/trees/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/data_structure/trees/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"\ud83d\udcda\ufe0f Pilhas (Stack) - Listas",permalink:"/buda/docs/data_structure/stack/"},next:{title:"\ud83d\udc68\u200d\ud83c\udfa8 Design Patterns",permalink:"/buda/docs/design_patterns/"}},s={},p=[{value:"\ud83e\udd14 Examples of uses",id:"-examples-of-uses",level:2},{value:"Being <strong>B</strong> the <strong>Imbalance Factor</strong> (<code>leftHeight - rightHeight</code>):",id:"being-b-the-imbalance-factor-leftheight---rightheight",level:3}],m={toc:p},u="wrapper";function k(e){let{components:t,...i}=e;return(0,n.kt)(u,(0,a.Z)({},m,i,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-trees"},"\ud83c\udf84 Trees"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Trees has similar to the ",(0,n.kt)("strong",{parentName:"li"},"node structure")," of lists"),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"principal")," node is called ",(0,n.kt)("strong",{parentName:"li"},"Root")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Below"),", we have the ",(0,n.kt)("strong",{parentName:"li"},"subtrees")),(0,n.kt)("li",{parentName:"ul"},"Each node has a node pointing to him")),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Tree",src:r(7986).Z,width:"272",height:"222"})),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"-examples-of-uses"},"\ud83e\udd14 Examples of uses"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"HTML structure"),(0,n.kt)("li",{parentName:"ul"},"Folders"),(0,n.kt)("li",{parentName:"ul"},"Interfaces"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"RL")," example: a tree.")),(0,n.kt)("hr",null),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"All nodes has ",(0,n.kt)("strong",{parentName:"li"},"0 or more children")),(0,n.kt)("li",{parentName:"ul"},"All nodes has just ",(0,n.kt)("strong",{parentName:"li"},"one father")),(0,n.kt)("li",{parentName:"ul"},"The ",(0,n.kt)("strong",{parentName:"li"},"node degree")," is defined by the ",(0,n.kt)("strong",{parentName:"li"},"number")," of ",(0,n.kt)("strong",{parentName:"li"},"children")," what he have"),(0,n.kt)("li",{parentName:"ul"},"Nodes with the ",(0,n.kt)("strong",{parentName:"li"},"same father")," are ",(0,n.kt)("strong",{parentName:"li"},"brothers")),(0,n.kt)("li",{parentName:"ul"},"Nodes with ",(0,n.kt)("strong",{parentName:"li"},"degree zero")," can be called ",(0,n.kt)("strong",{parentName:"li"},"leaf")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Path"),": A sequence of nodes. The ",(0,n.kt)("strong",{parentName:"li"},"size")," of this ",(0,n.kt)("strong",{parentName:"li"},"path")," is the ",(0,n.kt)("strong",{parentName:"li"},"number of arcs")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Depth:")," To each node of a tree, exists a ",(0,n.kt)("strong",{parentName:"li"},"unique path between root and this node"),". The ",(0,n.kt)("strong",{parentName:"li"},"size")," of this ",(0,n.kt)("strong",{parentName:"li"},"path")," is called Depth."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Height:")," The ",(0,n.kt)("strong",{parentName:"li"},"depth max")," in any node")),(0,n.kt)("hr",null),(0,n.kt)("h1",{id:"types-of-search"},"Types of Search"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Post order:")," ",(0,n.kt)("inlineCode",{parentName:"li"},"left -> right -> root")," (down to up)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"Pre order:")," ",(0,n.kt)("inlineCode",{parentName:"li"},"root -> left -> right")," (hierarchy) "),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("strong",{parentName:"li"},"In order:")," ",(0,n.kt)("inlineCode",{parentName:"li"},"left -> root -> right")," (crescent)")),(0,n.kt)("h1",{id:"binary-tree"},"Binary Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"A binary tree has ",(0,n.kt)("strong",{parentName:"li"},"bellow each node, maximum")," of ",(0,n.kt)("strong",{parentName:"li"},"2 subtrees.")),(0,n.kt)("li",{parentName:"ul"},"Each node has ",(0,n.kt)("strong",{parentName:"li"},"1 key")," and ",(0,n.kt)("strong",{parentName:"li"},"2 pointers"),", one for the subtree in ",(0,n.kt)("strong",{parentName:"li"},"left")," and one for subtree in ",(0,n.kt)("strong",{parentName:"li"},"right"))),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Ordering Tree",src:r(4859).Z,width:"510",height:"300"})),(0,n.kt)("hr",null),(0,n.kt)("h1",{id:"avl-tree"},"AVL Tree"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},"This method is used to ",(0,n.kt)("strong",{parentName:"p"},"auto balancing")," the trees with ",(0,n.kt)("strong",{parentName:"p"},"rotations"),", making the module of ",(0,n.kt)("inlineCode",{parentName:"p"},"heightLeft - heightRight")," be ",(0,n.kt)("strong",{parentName:"p"},"less than 1")," (balanced). In AVL trees, we register the ",(0,n.kt)("strong",{parentName:"p"},"node height"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Right rotation"),": The ",(0,n.kt)("strong",{parentName:"p"},"left")," subtree is heavy")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Left rotation"),": The ",(0,n.kt)("strong",{parentName:"p"},"right")," subtree is heavy")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Left Right rotation"),": The ",(0,n.kt)("strong",{parentName:"p"},"Node")," heavy in ",(0,n.kt)("strong",{parentName:"p"},"left")," and ",(0,n.kt)("strong",{parentName:"p"},"subtree")," heavy in ",(0,n.kt)("strong",{parentName:"p"},"right"),". Makes a ",(0,n.kt)("strong",{parentName:"p"},"left rotation")," and a ",(0,n.kt)("strong",{parentName:"p"},"right rotation"),".")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("p",{parentName:"li"},(0,n.kt)("strong",{parentName:"p"},"Right Left rotation"),": The ",(0,n.kt)("strong",{parentName:"p"},"node")," heavy in ",(0,n.kt)("strong",{parentName:"p"},"right")," and ",(0,n.kt)("strong",{parentName:"p"},"subtree")," heavy in ",(0,n.kt)("strong",{parentName:"p"},"left"),". Makes a ",(0,n.kt)("strong",{parentName:"p"},"right rotation")," and a ",(0,n.kt)("strong",{parentName:"p"},"left rotation"),"."))),(0,n.kt)("hr",null),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"Tree Avl Rotations",src:r(257).Z,width:"1280",height:"720"})),(0,n.kt)("hr",null),(0,n.kt)("h3",{id:"being-b-the-imbalance-factor-leftheight---rightheight"},"Being ",(0,n.kt)("strong",{parentName:"h3"},"B")," the ",(0,n.kt)("strong",{parentName:"h3"},"Imbalance Factor")," (",(0,n.kt)("inlineCode",{parentName:"h3"},"leftHeight - rightHeight"),"):"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"B > 1")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"key < root.left.key"),": ",(0,n.kt)("strong",{parentName:"li"},"Right rotation"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"B < -1")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"key > root.right.key"),": ",(0,n.kt)("strong",{parentName:"li"},"Left rotation"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"B > 1")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"key > root.left.key"),": ",(0,n.kt)("strong",{parentName:"li"},"Left Right rotation"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("inlineCode",{parentName:"li"},"B > -1")," and ",(0,n.kt)("inlineCode",{parentName:"li"},"key < root.right.key"),": ",(0,n.kt)("strong",{parentName:"li"},"Right Left rotation"),".")))}k.isMDXComponent=!0},257:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/tree-avl-rotations-example-676c88b6bf6885ceeac50558ef327125.png"},7986:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/tree-example-ac1ea6a12ce830bc214b39f08eed1f55.png"},4859:(e,t,r)=>{r.d(t,{Z:()=>a});const a=r.p+"assets/images/tree-ordering-example-ee493337351c9c10fe6fc4fd981786ba.png"}}]);