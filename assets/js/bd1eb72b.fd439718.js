"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[794],{3905:(e,r,t)=>{t.d(r,{Zo:()=>u,kt:()=>b});var o=t(7294);function n(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function i(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?i(Object(t),!0).forEach((function(r){n(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function s(e,r){if(null==e)return{};var t,o,n=function(e,r){if(null==e)return{};var t,o,n={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||(n[t]=e[t]);return n}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(n[t]=e[t])}return n}var l=o.createContext({}),c=function(e){var r=o.useContext(l),t=r;return e&&(t="function"==typeof e?e(r):a(a({},r),e)),t},u=function(e){var r=c(e.components);return o.createElement(l.Provider,{value:r},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var r=e.children;return o.createElement(o.Fragment,{},r)}},g=o.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(t),g=n,b=p["".concat(l,".").concat(g)]||p[g]||m[g]||i;return t?o.createElement(b,a(a({ref:r},u),{},{components:t})):o.createElement(b,a({ref:r},u))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=g;var s={};for(var l in r)hasOwnProperty.call(r,l)&&(s[l]=r[l]);s.originalType=e,s[p]="string"==typeof e?e:n,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}g.displayName="MDXCreateElement"},3251:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>l,contentTitle:()=>a,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var o=t(7462),n=(t(7294),t(3905));const i={},a="D&C (Divide & Conquer)",s={unversionedId:"books/grooking_algorithms/D&C_Quick-sort/README",id:"books/grooking_algorithms/D&C_Quick-sort/README",title:"D&C (Divide & Conquer)",description:"- D&C is used breaking a problem into smaller pieces",source:"@site/docs/books/grooking_algorithms/4-D&C_Quick-sort/README.md",sourceDirName:"books/grooking_algorithms/4-D&C_Quick-sort",slug:"/books/grooking_algorithms/D&C_Quick-sort/",permalink:"/docs/books/grooking_algorithms/D&C_Quick-sort/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/books/grooking_algorithms/4-D&C_Quick-sort/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Recursion",permalink:"/docs/books/grooking_algorithms/Recursion_Call-stack/"},next:{title:"Hash Tables",permalink:"/docs/books/grooking_algorithms/Hash-Tables/"}},l={},c=[{value:"Quicksort",id:"quicksort",level:2}],u={toc:c},p="wrapper";function m(e){let{components:r,...t}=e;return(0,n.kt)(p,(0,o.Z)({},u,t,{components:r,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dc-divide--conquer"},"D&C (Divide & Conquer)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"D&C is used breaking a problem into smaller pieces"),(0,n.kt)("li",{parentName:"ul"},"The base case is probably an empty array or an array with 1 element")),(0,n.kt)("hr",null),(0,n.kt)("h2",{id:"quicksort"},"Quicksort"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Choose a random value as pivot. Average runtime: O(n logn)"),(0,n.kt)("li",{parentName:"ul"},"The quicksort is faster than merge sort because the constants in big O")))}m.isMDXComponent=!0}}]);