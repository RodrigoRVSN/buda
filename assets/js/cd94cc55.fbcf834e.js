"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[774],{3905:(e,t,r)=>{r.d(t,{Zo:()=>c,kt:()=>f});var a=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var s=a.createContext({}),u=function(e){var t=a.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=u(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var r=e.components,n=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=u(r),d=n,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||o;return r?a.createElement(f,i(i({ref:t},c),{},{components:r})):a.createElement(f,i({ref:t},c))}));function f(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:n,i[1]=l;for(var u=2;u<o;u++)i[u]=r[u];return a.createElement.apply(null,i)}return a.createElement.apply(null,r)}d.displayName="MDXCreateElement"},8971:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>u});var a=r(7462),n=(r(7294),r(3905));const o={},i="\ud83c\udfb2 Data Structures",l={unversionedId:"data_structure/README",id:"data_structure/README",title:"\ud83c\udfb2 Data Structures",description:"Ways to store data in memory",source:"@site/docs/data_structure/README.md",sourceDirName:"data_structure",slug:"/data_structure/",permalink:"/docs/data_structure/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/data_structure/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Test Driven Development (TDD)",permalink:"/docs/concepts/TDD/"},next:{title:"\ud83e\uddd0 Big O - Asymptotic Complexity (O(x))",permalink:"/docs/data_structure/big-o/"}},s={},u=[{value:"Ways to store data in memory",id:"ways-to-store-data-in-memory",level:2},{value:"Structures:",id:"structures",level:2},{value:"ATD (Abstract types of data)",id:"atd-abstract-types-of-data",level:2}],c={toc:u},p="wrapper";function m(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,a.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"-data-structures"},"\ud83c\udfb2 Data Structures"),(0,n.kt)("h2",{id:"ways-to-store-data-in-memory"},"Ways to store data in memory"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Manage data efficiently"),(0,n.kt)("li",{parentName:"ul"},"What type of organization? Sequential or not?"),(0,n.kt)("li",{parentName:"ul"},"How to search, insert, remove?"),(0,n.kt)("li",{parentName:"ul"},"Which operation is most important?"),(0,n.kt)("li",{parentName:"ul"},"What is the asymptotic complexity? ",(0,n.kt)("a",{parentName:"li",href:"./big-o/"},"Big-O notation"))),(0,n.kt)("h2",{id:"structures"},"Structures:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./stack/"},"Stacks")," - Ordered (type of list)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./queues/"},"Queues")," - Ordered (type of list)"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./lists/"},"Lists")," - Ordered"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./trees/"},"Trees")," - Hierarchical Relationships between elements"),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"./graphs/"},"Graphs")," - Generic and can organize and relate elements.")),(0,n.kt)("h2",{id:"atd-abstract-types-of-data"},"ATD (Abstract types of data)"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Focus in operations of a data type and we abstract ourselves from how\nit has been implemented. "),(0,n.kt)("li",{parentName:"ul"},"User just see interface, no the implementation.")))}m.isMDXComponent=!0}}]);