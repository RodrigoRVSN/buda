"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[548],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var l=o.createContext({}),c=function(e){var t=o.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p="mdxType",g={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=n,h=p["".concat(l,".").concat(m)]||p[m]||g[m]||a;return r?o.createElement(h,i(i({ref:t},u),{},{components:r})):o.createElement(h,i({ref:t},u))}));function h(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,i=new Array(a);i[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[p]="string"==typeof e?e:n,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,r)}m.displayName="MDXCreateElement"},7401:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>g,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=r(7462),n=(r(7294),r(3905));const a={},i="Dijkstra",s={unversionedId:"books/grooking_algorithms/Dijkstra/README",id:"books/grooking_algorithms/Dijkstra/README",title:"Dijkstra",description:"- Breadth First Search is used to calculate the shortest path on a unweighted graph",source:"@site/docs/books/grooking_algorithms/7-Dijkstra/README.md",sourceDirName:"books/grooking_algorithms/7-Dijkstra",slug:"/books/grooking_algorithms/Dijkstra/",permalink:"/docs/books/grooking_algorithms/Dijkstra/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/books/grooking_algorithms/7-Dijkstra/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Bread First Search",permalink:"/docs/books/grooking_algorithms/Bread-First-Search/"},next:{title:"NP Complete",permalink:"/docs/books/grooking_algorithms/NP-Complete/"}},l={},c=[],u={toc:c},p="wrapper";function g(e){let{components:t,...r}=e;return(0,n.kt)(p,(0,o.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"dijkstra"},"Dijkstra"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Breadth First Search is used to calculate the shortest path on a unweighted graph"),(0,n.kt)("li",{parentName:"ul"},"Dijkstra's algorithm is used to calculate the shortest path on a weighted graph"),(0,n.kt)("li",{parentName:"ul"},"This algorithm works just with all weights as positive"),(0,n.kt)("li",{parentName:"ul"},"When we have negative weights, we can use Bellman-Ford algorithm")))}g.isMDXComponent=!0}}]);