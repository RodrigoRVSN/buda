"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[122],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=c(n),d=i,h=m["".concat(s,".").concat(d)]||m[d]||u[d]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=n[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},4303:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={},o="Bridge",l={unversionedId:"design_patterns/structural/Brigde/README",id:"design_patterns/structural/Brigde/README",title:"Bridge",description:"What is?",source:"@site/docs/design_patterns/structural/Brigde/README.md",sourceDirName:"design_patterns/structural/Brigde",slug:"/design_patterns/structural/Brigde/",permalink:"/buda/docs/design_patterns/structural/Brigde/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/design_patterns/structural/Brigde/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Adapter",permalink:"/buda/docs/design_patterns/structural/Adapter/"},next:{title:"Facade",permalink:"/buda/docs/design_patterns/structural/Facade/"}},s={},c=[{value:"What is?",id:"what-is",level:2},{value:"What this pattern solve?",id:"what-this-pattern-solve",level:2},{value:"Steps",id:"steps",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"Example (Typescript)",id:"example-typescript",level:2}],p={toc:c},m="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"bridge"},"Bridge"),(0,i.kt)("h2",{id:"what-is"},"What is?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"With this pattern we can split a large class in two separate independents hierarchies, Implementation and Abstraction.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"what-this-pattern-solve"},"What this pattern solve?"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If we need to make a different implementation in a class, we need to make a lot of code when add a new attribute, so we need to use composition instead inheritance")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"steps"},"Steps"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Identify the ortogonal dimensions in the classes, like abstraction/platform, domain/infrastructure, front-end/back-end, or interface/implementation."),(0,i.kt)("li",{parentName:"ul"},"Define the abstractions that client needs in the abstraction class"),(0,i.kt)("li",{parentName:"ul"},"Declare in implementation interface what'll be need of the abstraction class"),(0,i.kt)("li",{parentName:"ul"},"Create implementation classes, following the implementation interfaces"),(0,i.kt)("li",{parentName:"ul"},"Reference in the abstraction class, the implementation class. The abstraction class will delegate a lot of work to the referenced implementation class."),(0,i.kt)("li",{parentName:"ul"},"If we have several variants of high-level logic, we should create more abstractions methods extending the base abstraction class"),(0,i.kt)("li",{parentName:"ul"},"The client should pass an implementation object to the abstraction class and he'll use the abstraction, forgotting the implementation.")),(0,i.kt)("hr",null),(0,i.kt)("h2",{id:"when-to-use"},"When to use"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"When we want to divide and organize a monolithic that has several variants of functionality"),(0,i.kt)("li",{parentName:"ul"},"When we need to extend a class in several orthogonal dimensions"),(0,i.kt)("li",{parentName:"ul"},"When we need to switch the implementation in runtime")),(0,i.kt)("h2",{id:"example-typescript"},"Example (Typescript)"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The Abstraction defines the interface for the \"control\" part of the two class\n * hierarchies. It maintains a reference to an object of the Implementation\n * hierarchy and delegates all of the real work to this object.\n */\n class Abstraction {\n  protected implementation: Implementation;\n\n  constructor(implementation: Implementation) {\n      this.implementation = implementation;\n  }\n\n  public operation(): string {\n      const result = this.implementation.operationImplementation();\n      return `Abstraction: Base operation with:\\n${result}`;\n  }\n}\n\n/**\n* You can extend the Abstraction without changing the Implementation classes.\n*/\nclass ExtendedAbstraction extends Abstraction {\n  public operation(): string {\n      const result = this.implementation.operationImplementation();\n      return `ExtendedAbstraction: Extended operation with:\\n${result}`;\n  }\n}\n\n/**\n* The Implementation defines the interface for all implementation classes. It\n* doesn't have to match the Abstraction's interface. In fact, the two\n* interfaces can be entirely different. Typically the Implementation interface\n* provides only primitive operations, while the Abstraction defines higher-\n* level operations based on those primitives.\n*/\ninterface Implementation {\n  operationImplementation(): string;\n}\n\n/**\n* Each Concrete Implementation corresponds to a specific platform and\n* implements the Implementation interface using that platform's API.\n*/\nclass ConcreteImplementationA implements Implementation {\n  public operationImplementation(): string {\n      return 'ConcreteImplementationA: Here\\'s the result on the platform A.';\n  }\n}\n\nclass ConcreteImplementationB implements Implementation {\n  public operationImplementation(): string {\n      return 'ConcreteImplementationB: Here\\'s the result on the platform B.';\n  }\n}\n\n/**\n* Except for the initialization phase, where an Abstraction object gets linked\n* with a specific Implementation object, the client code should only depend on\n* the Abstraction class. This way the client code can support any abstraction-\n* implementation combination.\n*/\nfunction clientCode(abstraction: Abstraction) {\n  // ..\n\n  console.log(abstraction.operation());\n\n  // ..\n}\n\n/**\n* The client code should be able to work with any pre-configured abstraction-\n* implementation combination.\n*/\nlet implementation = new ConcreteImplementationA();\nlet abstraction = new Abstraction(implementation);\nclientCode(abstraction);\n\nconsole.log('');\n\nimplementation = new ConcreteImplementationB();\nabstraction = new ExtendedAbstraction(implementation);\nclientCode(abstraction);\n")))}u.isMDXComponent=!0}}]);