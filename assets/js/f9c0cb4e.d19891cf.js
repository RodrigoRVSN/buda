"use strict";(self.webpackChunkbuda=self.webpackChunkbuda||[]).push([[79],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var i=r.createContext({}),l=function(e){var t=r.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},u=function(e){var t=l(e.components);return r.createElement(i.Provider,{value:t},e.children)},p="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),h=o,m=p["".concat(i,".").concat(h)]||p[h]||d[h]||a;return n?r.createElement(m,c(c({ref:t},u),{},{components:n})):r.createElement(m,c({ref:t},u))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,c=new Array(a);c[0]=h;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[p]="string"==typeof e?e:o,c[1]=s;for(var l=2;l<a;l++)c[l]=n[l];return r.createElement.apply(null,c)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},8158:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>c,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const a={},c="Factory",s={unversionedId:"design_patterns/creational/Factory/README",id:"design_patterns/creational/Factory/README",title:"Factory",description:"What is?",source:"@site/docs/design_patterns/creational/Factory/README.md",sourceDirName:"design_patterns/creational/Factory",slug:"/design_patterns/creational/Factory/",permalink:"/buda/docs/design_patterns/creational/Factory/",draft:!1,editUrl:"https://github.com/RodrigoRVSN/buda/docs/design_patterns/creational/Factory/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Strategy",permalink:"/buda/docs/design_patterns/behavioral/Strategy/"},next:{title:"Singleton",permalink:"/buda/docs/design_patterns/creational/Singleton/"}},i={},l=[{value:"What is?",id:"what-is",level:2},{value:"Problems",id:"problems",level:2},{value:"Steps",id:"steps",level:2},{value:"When to use",id:"when-to-use",level:2},{value:"Example (Typescript)",id:"example-typescript",level:2}],u={toc:l},p="wrapper";function d(e){let{components:t,...n}=e;return(0,o.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"factory"},"Factory"),(0,o.kt)("h2",{id:"what-is"},"What is?"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"With this pattern, we provide an interface for creating objects in a superclass")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"problems"},"Problems"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"To insert new feature, we need to make a pretty nasty code and repeat the code")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"steps"},"Steps"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Make all products follow the same interface"),(0,o.kt)("li",{parentName:"ul"},"Override in subclasses the methods")),(0,o.kt)("hr",null),(0,o.kt)("h2",{id:"when-to-use"},"When to use"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"When we don\u2019t know beforehand the exact types and dependencies of the objects your code should work with."),(0,o.kt)("li",{parentName:"ul"},"When you want to provide users of your library or framework with a way to extend its internal components."),(0,o.kt)("li",{parentName:"ul"},"When you want to save time reusing resources instead rebuilding them each time.")),(0,o.kt)("h2",{id:"example-typescript"},"Example (Typescript)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"/**\n * The Creator class declares the factory method that is supposed to return an\n * object of a Product class. The Creator's subclasses usually provide the\n * implementation of this method.\n */\nabstract class Creator {\n    /**\n     * Note that the Creator may also provide some default implementation of the\n     * factory method.\n     */\n    public abstract factoryMethod(): Product;\n\n    /**\n     * Also note that, despite its name, the Creator's primary responsibility is\n     * not creating products. Usually, it contains some core business logic that\n     * relies on Product objects, returned by the factory method. Subclasses can\n     * indirectly change that business logic by overriding the factory method\n     * and returning a different type of product from it.\n     */\n    public someOperation(): string {\n        // Call the factory method to create a Product object.\n        const product = this.factoryMethod();\n        // Now, use the product.\n        return `Creator: The same creator's code has just worked with ${product.operation()}`;\n    }\n}\n\n/**\n * Concrete Creators override the factory method in order to change the\n * resulting product's type.\n */\nclass ConcreteCreator1 extends Creator {\n    /**\n     * Note that the signature of the method still uses the abstract product\n     * type, even though the concrete product is actually returned from the\n     * method. This way the Creator can stay independent of concrete product\n     * classes.\n     */\n    public factoryMethod(): Product {\n        return new ConcreteProduct1();\n    }\n}\n\nclass ConcreteCreator2 extends Creator {\n    public factoryMethod(): Product {\n        return new ConcreteProduct2();\n    }\n}\n\n/**\n * The Product interface declares the operations that all concrete products must\n * implement.\n */\ninterface Product {\n    operation(): string;\n}\n\n/**\n * Concrete Products provide various implementations of the Product interface.\n */\nclass ConcreteProduct1 implements Product {\n    public operation(): string {\n        return '{Result of the ConcreteProduct1}';\n    }\n}\n\nclass ConcreteProduct2 implements Product {\n    public operation(): string {\n        return '{Result of the ConcreteProduct2}';\n    }\n}\n\n/**\n * The client code works with an instance of a concrete creator, albeit through\n * its base interface. As long as the client keeps working with the creator via\n * the base interface, you can pass it any creator's subclass.\n */\nfunction clientCodeFactory(creator: Creator) {\n    // ...\n    console.log('Client: I\\'m not aware of the creator\\'s class, but it still works.');\n    console.log(creator.someOperation());\n    // ...\n}\n\n/**\n * The Application picks a creator's type depending on the configuration or\n * environment.\n */\nconsole.log('App: Launched with the ConcreteCreator1.');\nclientCodeFactory(new ConcreteCreator1());\nconsole.log('');\n\nconsole.log('App: Launched with the ConcreteCreator2.');\nclientCodeFactory(new ConcreteCreator2());\n\n")))}d.isMDXComponent=!0}}]);